<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FaceTime App</title>
</head>
<body>
    <h2>FaceTime-like Video Chat App</h2>
    <div class="video-container">
        <video id="localVideo" autoplay playsinline muted></video>
        <video id="remoteVideo" autoplay playsinline></video>
    </div>
    <button id="startButton">Start</button>
    <button id="callButton" disabled>Call</button>
    <button id="hangupButton" disabled>Hang Up</button>
<style>
    body {
    font-family: Arial, sans-serif;
    text-align: center;
    background-color: #f0f0f0;
}

h2 {
    color: #333;
}

.video-container {
    display: flex;
    justify-content: center;
    margin-top: 20px;
}

video {
    width: 45%;
    margin: 0 10px;
    border-radius: 8px;
    background-color: #000;
}

button {
    margin: 10px;
    padding: 10px 20px;
    font-size: 16px;
    cursor: pointer;
}

</style>
<script>
    let localStream;
let remoteStream;
let peerConnection;

const startButton = document.getElementById('startButton');
const callButton = document.getElementById('callButton');
const hangupButton = document.getElementById('hangupButton');
const localVideo = document.getElementById('localVideo');
const remoteVideo = document.getElementById('remoteVideo');

const servers = {
    iceServers: [
        {
            urls: 'stun:stun.l.google.com:19302' // Free STUN server
        }
    ]
};

startButton.onclick = start;
callButton.onclick = call;
hangupButton.onclick = hangup;

function start() {
    navigator.mediaDevices.getUserMedia({ video: true, audio: true })
        .then(stream => {
            localStream = stream;
            localVideo.srcObject = stream;
            callButton.disabled = false;
        })
        .catch(error => {
            console.error('Error accessing media devices.', error);
        });
}

function call() {
    peerConnection = new RTCPeerConnection(servers);

    peerConnection.onicecandidate = event => {
        if (event.candidate) {
            // Send the candidate to the remote peer
        }
    };

    peerConnection.ontrack = event => {
        remoteVideo.srcObject = event.streams[0];
    };

    localStream.getTracks().forEach(track => peerConnection.addTrack(track, localStream));

    peerConnection.createOffer()
        .then(offer => {
            peerConnection.setLocalDescription(offer);
            // Send the offer to the remote peer
        })
        .catch(error => {
            console.error('Error creating an offer.', error);
        });

    callButton.disabled = true;
    hangupButton.disabled = false;
}

function hangup() {
    peerConnection.close();
    peerConnection = null;
    callButton.disabled = false;
    hangupButton.disabled = true;
}

</script>
</body>
</html>